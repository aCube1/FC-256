======== FC-256 CPU Instructions ========

==== ADD - Add with Carry ====
- Add D1 and D2 with Carry bit, and store result in D1.

== Status Register ==
Carry Flag       | Set if overflow on 15th bit
Zero Flag        | Set if result is Zero
Ignore Interrupt | Not affected
Overflow Flag    | Set if bit sign is incorrect
Sign Flag        | Set if the result is negative

== Encoding ==
Opcode | Addr Mode | Operand          | Cycles
 0x15  | Register  | r1, r2           |   4
 0x35  | Immediate | r1, Const        |   5
 0x55  | Indexed   | [Bank:r1], r2    |   5
 0x75  | Indexed   | r1, [Bank:r2]    |   5
 0x95  | Indexed   | [Bank:r1], Const |   6
 0xb5  | Absolute  | [Addr], r1       |   6
 0xd5  | Absolute  | r1, [Addr]       |   6
 0xf5  | Absolute  | [Addr], Const    |   7


==== AND - Logical AND ====
- Perform a AND, bit a bit, on the D1 using the D2 contents.

== Status Register ==
Carry Flag       | Not affected
Zero Flag        | Set if result is Zero
Ignore Interrupt | Not affected
Overflow Flag    | Not affected
Sign Flag        | Set if the 15th bit of the result is set

== Encoding ==
Opcode | Addr Mode | Operand          | Cycles
 0x11  | Register  | r1, r2           |   3
 0x31  | Immediate | r1, Const        |   4
 0x51  | Indexed   | [Bank:r1], r2    |   4
 0x71  | Indexed   | r1, [Bank:r2]    |   4
 0x91  | Indexed   | [Bank:r1], Const |   5
 0xb1  | Absolute  | [Addr], r1       |   5
 0xd1  | Absolute  | r1, [Addr]       |   5
 0xf1  | Absolute  | [Addr], Const    |   6


==== BIF - Branch If Flags ====
- Perform a AND operation with the ST register using D1 contents, if the result
is not Zero, branch to the desired Offset. Result of AND is discarded.

== Status Register ==
Carry Flag       | Not affected
Zero Flag        | Not affected
Ignore Interrupt | Not affected
Overflow Flag    | Not affected
Sign Flag        | Not affected

== Encoding ==
Opcode | Addr Mode | Operand         | Cycles
 0xc9  | Relative  | (Offset), Const |   6


==== BIT - Bit Test ====
- Test one or more bits at D2 location. The D1 bits are used as mask pattern
and is ANDed with D2, the result is not kept.

== Status Register ==
Carry Flag       | Not affected
Zero Flag        | Set if the result is Zero
Ignore Interrupt | Not affected
Overflow Flag    | Set to 14th bit of D2
Sign Flag        | Set to 15th bit of D2

== Encoding ==
Opcode | Addr Mode | Operand          | Cycles
 0x14  | Register  | r1, r2           |   3
 0x34  | Immediate | r1, Const        |   4
 0x54  | Indexed   | [Bank:r1], r2    |   4
 0x74  | Indexed   | r1, [Bank:r2]    |   4
 0x94  | Indexed   | [Bank:r1], Const |   5
 0xb4  | Absolute  | [Addr], r1       |   5
 0xd4  | Absolute  | r1, [Addr]       |   5
 0xf4  | Absolute  | [Addr], Const    |   6


==== BNF - Branch if Not Flags ====
- Perform a AND operation with the ST register using D1 contents, if the result
is Zero, branch to the desired Offset. Result of AND is discarded.

== Status Register ==
Carry Flag       | Not affected
Zero Flag        | Not affected
Ignore Interrupt | Not affected
Overflow Flag    | Not affected
Sign Flag        | Not affected

== Encoding ==
Opcode | Addr Mode | Operand         | Cycles
 0xca  | Relative  | (Offset), Const |   6

==== BRA - Branch Unconditionally ====
- Branch to the desired offset without any condition.

== Status Register ==
Carry Flag       | Not affected
Zero Flag        | Not affected
Ignore Interrupt | Not affected
Overflow Flag    | Not affected
Sign Flag        | Not affected

== Encoding ==
Opcode | Addr Mode | Operand  | Cycles
 0xcb  | Relative  | (Offset) |   4

==== CLR - Clear Flags ====
- Set specified flags by D1 to 0.

== Status Register ==
Carry Flag       | Can be cleared
Zero Flag        | Can be cleared
Ignore Interrupt | Can be cleared
Overflow Flag    | Can be cleared
Sign Flag        | Can be cleared

== Encoding ==
Opcode | Addr Mode | Operand | Cycles
 0x45  | Immediate | Const   |   3

==== CMP - Compare ====
- Compare contents of D1 and D2, and set flags as appropriate.

== Status Register ==
Carry Flag       | Set if D1 >= D2
Zero Flag        | Set if D1 == D2
Ignore Interrupt | Not affected
Overflow Flag    | Not affected
Sign Flag        | Set to 15th bit of result

== Encoding ==
Opcode | Addr Mode | Operand          | Cycles
 0x1b  | Register  | r1, r2           |   4
 0x3b  | Immediate | r1, Const        |   5
 0x5b  | Indexed   | [Bank:r1], r2    |   5
 0x7b  | Indexed   | r1, [Bank:r2]    |   5
 0x9b  | Indexed   | [Bank:r1], Const |   6
 0xbb  | Absolute  | [Addr], r1       |   6
 0xdb  | Absolute  | r1, [Addr]       |   6
 0xfb  | Absolute  | [Addr], Const    |   7


==== DEC - Decrement ====
- Decrement D1 by 1.

== Status Register ==
Carry Flag       | Not affected
Zero Flag        | Set if result is Zero
Ignore Interrupt | Not affected
Overflow Flag    | Not affected
Sign Flag        | Set if the result is negative

== Encoding ==
Opcode | Addr Mode | Operand   | Cycles
 0x23  | Register  | r1        |   2
 0x63  | Absolute  | [Addr]    |   4
 0x83  | Indexed   | [Bank:r1] |   4


==== DIV - Unsigned Divide ====
- Divide D1 by D2, store the quocient in D1, and push the remainder into the
stack. Division by Zero will produce the result of 0xffff, a remainder that is
equal to the dividend and trigger the DivZero interrupt vector.

== Status Register ==
Carry Flag       | Always cleared
Zero Flag        | Set if quocient is Zero
Ignore Interrupt | Not affected
Overflow Flag    | Undefined
Sign Flag        | Set if the quocient is negative

== Encoding ==
Opcode | Addr Mode | Operand          | Cycles
 0x1e  | Register  | r1, r2           |   6
 0x3e  | Immediate | r1, Const        |   7
 0x5e  | Indexed   | [Bank:r1], r2    |   7
 0x7e  | Indexed   | r1, [Bank:r2]    |   7
 0x9e  | Indexed   | [Bank:r1], Const |   8
 0xbe  | Absolute  | [Addr], r1       |   8
 0xde  | Absolute  | r1, [Addr]       |   8
 0xfe  | Absolute  | [Addr], Const    |   9

==== DVS - Signed Divide ====
- Do the same as DIV, but treat operands as signed integers.

== Status Register ==
Carry Flag       | Always cleared
Zero Flag        | Set if quocient is Zero
Ignore Interrupt | Not affected
Overflow Flag    | Undefined
Sign Flag        | Set if the quocient is Negative

== Encoding ==
Opcode | Addr Mode | Operand          | Cycles
 0x1f  | Register  | r1, r2           |   6
 0x3f  | Immediate | r1, Const        |   7
 0x5f  | Indexed   | [Bank:r1], r2    |   7
 0x7f  | Indexed   | r1, [Bank:r2]    |   7
 0x9f  | Indexed   | [Bank:r1], Const |   8
 0xbf  | Absolute  | [Addr], r1       |   8
 0xdf  | Absolute  | r1, [Addr]       |   8
 0xff  | Absolute  | [Addr], Const    |   9


==== HLT - Halt/Wait ====
- Set CPU into a Wait state until a Interrupt Request is triggerred.

== Status Register ==
Carry Flag       | Not affected
Zero Flag        | Not affected
Ignore Interrupt | Not affected
Overflow Flag    | Not affected
Sign Flag        | Not affected

== Encoding ==
Opcode | Addr Mode | Operand | Cycles
 0x01  | Implied   | ------- |   1
 0xe1  | Implied   | ------- |   1


==== INC - Increment ====
- Increment D1 by 1.

== Status Register ==
Carry Flag       | Not affected
Zero Flag        | Set if result is Zero
Ignore Interrupt | Not affected
Overflow Flag    | Not affected
Sign Flag        | Set if the result is Negative

== Encoding ==
Opcode | Addr Mode | Operand   | Cycles
 0x22  | Register  | r1        |   2
 0x62  | Absolute  | [Addr]    |   4
 0x82  | Indexed   | [Bank:r1] |   4


==== IOR - Logical Inclusive OR ====
- Perform a inclusive OR, bit a bit, on the D1 using the D2 contents.

== Status Register ==
Carry Flag       | Not affected
Zero Flag        | Set if result is Zero
Ignore Interrupt | Not affected
Overflow Flag    | Not affected
Sign Flag        | Set if the result is Negative

== Encoding ==
Opcode | Addr Mode | Operand          | Cycles
 0x12  | Register  | r1, r2           |   3
 0x32  | Immediate | r1, Const        |   4
 0x52  | Indexed   | [Bank:r1], r2    |   4
 0x72  | Indexed   | r1, [Bank:r2]    |   4
 0x92  | Indexed   | [Bank:r1], Const |   5
 0xb2  | Absolute  | [Addr], r1       |   5
 0xd2  | Absolute  | r1, [Addr]       |   5
 0xf2  | Absolute  | [Addr], Const    |   6


==== JMP - Jump Unconditionally ====
- Set the program counter to the target memory address.

== Status Register ==
Carry Flag       | Not affected
Zero Flag        | Not affected
Ignore Interrupt | Not affected
Overflow Flag    | Not affected
Sign Flag        | Not affected

== Encoding ==
Opcode | Addr Mode | Operand   | Cycles
 0x6c  | Absolute  | [Addr]    |   5
 0x8c  | Indexed   | [Bank:r1] |   5


==== JSR - Jump to Subroutine ====
- Pushes the program bank and counter (minus one) into the stack. Then set the
program counter to the target memory address.

== Status Register ==
Carry Flag       | Not affected
Zero Flag        | Not affected
Ignore Interrupt | Not affected
Overflow Flag    | Not affected
Sign Flag        | Not affected

== Encoding ==
Opcode | Addr Mode | Operand   | Cycles
 0x6d  | Absolute  | [Addr]    |   6
 0x8d  | Indexed   | [Bank:r1] |   6
